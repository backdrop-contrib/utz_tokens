<?php
/**
 * @file
 * Create tokens to render a date and/or time in the user's time zone.
 */


/**
 * Implements hook_menu().
 */
function utz_tokens_menu() {
  $items['admin/config/regional/utz-tokens'] = array(
    'title' => 'User Time Zone Tokens',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('utz_tokens_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure User Time Zone Tokens settings.',
    'file' => 'utz_tokens.admin.inc',
  );
  return $items;
}


/**
 * Implements hook_init().
 */
function utz_tokens_init() {
  if (config_get('utz_tokens.settings', 'detect_anonymous')) {
    if (module_exists('timezone_detect') && module_exists('luxon')) {
      backdrop_add_library('timezone_detect', 'jstz');
      backdrop_add_library('luxon', 'luxon');
      backdrop_add_js(backdrop_get_path('module', 'utz_tokens') . '/js/utz_tokens.js', 'file');
    }
    else {
      // Fix config setting if either module is missing. This could happen if
      // the user disabled one of the required modules after enabling the
      // setting.
      config_set('utz_tokens.settings', 'detect_anonymous', 0);
      backdrop_set_message(t('One or both of Time Zone Detect and Luxon modules is disabled; detection of anonymous user time zone has been turned off in User Time Zone Tokens settings.'), 'warning');
    }
  }
}


/**
 * Implements hook_theme().
 */
function utz_tokens_theme($existing, $type, $theme, $path) {
  $themes = array(
    'utz_datetime' => array(
      'variables' => array(
        'datetime' => NULL,
        'format' => NULL,
      ),
      'file' => 'utz_tokens.theme.inc',
    ),
  );
  return $themes;
}


/**
 * Implements hook_token_info().
 */
function utz_tokens_token_info() {
  $info['types']['utz-datetime'] = array(
    'name' => t('Date specified'),
    'description' => t("Tokens that render a specified date and/or time in the user's time zone."),
  );

  $info['tokens']['utz-datetime']['?|?'] = array(
    'name' => t('Date/time'),
    'description' => t("Render a specified date and/or time with a specified format in the user's time zone."),
  );
  return $info;
}


/**
 * Implements hook_tokens().
 */
function utz_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'utz-datetime') {
    foreach ($tokens as $key => $token) {
      // Note that we use pipe (|) as second delimiter rather than colon (:)
      // because both the time string and format string likely contain colons.
      $ppos = strpos($key, '|');
      if ($ppos === FALSE) {
        $replacements[$token] = t('Token error: %token has an invalid format.', array('%token' => $token));
      }
      else {
        $replacements[$token] = theme('utz_datetime', array(
          'datetime' => trim(substr($key, 0, $ppos)),
          'format' => substr($key, $ppos + 1),
        ));
      }
    }
  }
  return $replacements;
}


/**
 * Implements hook_config_info().
 */
function utz_tokens_config_info() {
  $prefixes['utz_tokens.settings'] = array(
    'label' => t('User Time Zone Tokens settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}


/**
 * Testing block for Javascript. Return a render array of test strings that
 * compare PHP and JS rendering with the same PHP formatting codes.
 */
function _utz_tokens_test_view() {
  $datetime = '2021-04-04 10:05 PDT';

  $build[] = array('#markup' => _utz_tokens_test($datetime, 'd D j l N S w z')); // days
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'W')); // weeks
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'F m M n t')); // months
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'L o Y y')); // years
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'a A')); // ampm
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'B')); // swatch
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'g H h')); // hours
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'i s u v')); // minsec
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'e I O P p T Z')); // timezone
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'c')); // iso8601
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'r')); // rfc2822
  $build[] = array('#markup' => _utz_tokens_test($datetime, 'U')); // timestamp

  return $build;
}


/**
 * Testing function for Javascript. Return a string to compare PHP and JS for a
 * given time and format string.
 */
function _utz_tokens_test($datetime, $format) {
  $datetime_obj = new DateTime($datetime);
  $datetime_obj->setTimeZone(new DateTimeZone(backdrop_get_user_timezone()));
  $phpstr = $datetime_obj->format($format);
  $jsstr = '<span class="utz-datetime" data-timestamp="' . $datetime_obj->getTimestamp() . '" data-format="' . $format . '" data-anonymous="' . user_is_anonymous() . '">' . 'PLACEHOLDER' . '</span>';
  return '<p>time: \'' . $datetime . '\' format: \'' . $format . '\'<br>' . $phpstr . '<br>' . $jsstr . '</p>';
}

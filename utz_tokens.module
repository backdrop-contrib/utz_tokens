<?php
/**
 * @file
 * Create tokens to render a date and/or time in the user's time zone.
 */

/**
 * Implements hook_token_info().
 */
function utz_tokens_token_info() {
  $info['types']['utz-datetime'] = array(
    'name' => t('Time tokens'),
    'description' => t("Tokens that render a date and/or time in the user's time zone."),
  );

  $info['tokens']['utz-datetime']['?|?'] = array(
    'name' => t('Date/time'),
    'description' => t("Render a date and/or time with a specified format in the user's own time zone."),
  );
  return $info;
}


/**
 * Implements hook_tokens().
 */
function utz_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'utz-datetime') {
    global $user;
    $anonymous = $user->uid ? 0 : 1;
    foreach ($tokens as $key => $token) {
      // Note that we use pipe (|) as second delimiter rather than colon (:)
      // because both the time string and format string likely contain colons.
      $ppos = strpos($key, '|');
      if ($ppos === FALSE) {
        $replacements[$token] = t('Token error: %token has an invalid time-tokens format.', array('%token' => $token));
      }
      else {
        $timestr = trim(substr($key, 0, $ppos));
        try {
          $datetime = new DateTime($timestr); // could fail
          $datetime->setTimeZone(new DateTimeZone(backdrop_get_user_timezone()));
          $format = filter_xss(substr($key, $ppos + 1));
          // Rendered date/time gets wrapped in <span> with a class for CSS
          // formatting and data attributes to allow future Javascript
          // processing to detect and deal with anonymous users and cached pages.
          $replacements[$token] = '<span class="utz-datetime" data-timestamp="' . $datetime->getTimestamp() . '" data-format="' . $format . '" data-anonymous="' . $anonymous . '">' . $datetime->format($format) . '</span>';
        }
        catch (Exception $e) {
          $replacements[$token] = t('Token error: unable to parse time %timestr in %token.', array('%timestr' => $timestr, '%token' => $token));
        }
      }
    }
  }
  return $replacements;
}

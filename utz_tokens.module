<?php
/**
 * @file
 * Create tokens to render a date and/or time in the user's time zone.
 */

/**
 * Define detection methods set in configuration.
 */
define('UTZ_TOKENS_USER_SERVER', 0);
define('UTZ_TOKENS_USER_BROWSER', 1);
define('UTZ_TOKENS_BROWSER_BROWSER', 2);

/**
 * Implements hook_menu().
 */
function utz_tokens_menu() {
  $items['admin/config/regional/utz-tokens'] = array(
    'title' => 'User time zone tokens',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('utz_tokens_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure User Time Zone Tokens.',
    'file' => 'utz_tokens.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function utz_tokens_init() {
  $timezone_detection = config_get('utz_tokens.settings', 'timezone_detection');
  if ($timezone_detection) {
    if (module_exists('luxon')) {
      backdrop_add_library('luxon', 'luxon');
      backdrop_add_js(backdrop_get_path('module', 'utz_tokens') . '/js/utz_tokens.js', 'file');
      backdrop_add_js(array('utz_tokens' => array('timezone_detection' => $timezone_detection)), 'setting');
    }
    else {
      // Fix config setting if Luxon module is missing. This could happen if the
      // user disabled Luxon after enabling the setting.
      config_set('utz_tokens.settings', 'timezone_detection', UTZ_TOKENS_USER_SERVER);
      backdrop_set_message(t('The Luxon module is disabled; detection of browser time zone has been turned off in !link.', array('!link' => l(t('User Time Zone Tokens settings'), 'admin/config/regional/utz-tokens'))), 'warning');
    }
  }
}

/**
 * Implements hook_theme().
 */
function utz_tokens_theme($existing, $type, $theme, $path) {
  $themes = array(
    'utz_datetime' => array(
      'variables' => array(
        'datetime' => NULL,
        'format' => NULL,
      ),
      'file' => 'utz_tokens.theme.inc',
    ),
  );
  return $themes;
}

/**
 * Implements hook_token_info().
 */
function utz_tokens_token_info() {
  $info['types']['utz-datetime'] = array(
    'name' => t('Date specified'),
    'description' => t("Tokens that render a specified date and/or time in the user's time zone."),
  );

  $info['tokens']['utz-datetime']['?|?'] = array(
    'name' => t('Date/time'),
    'description' => t("Render a specified date and/or time with a specified format in the user's time zone."),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function utz_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'utz-datetime') {
    foreach ($tokens as $key => $token) {
      // Note that we use pipe (|) as second delimiter rather than colon (:)
      // because both the time string and format string likely contain colons.
      $ppos = strpos($key, '|');
      if ($ppos === FALSE) {
        $replacements[$token] = t('Token error: %token has an invalid format.', array('%token' => $token));
      }
      else {
        $replacements[$token] = theme('utz_datetime', array(
          'datetime' => trim(substr($key, 0, $ppos)),
          'format' => substr($key, $ppos + 1),
        ));
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_config_info().
 */
function utz_tokens_config_info() {
  $prefixes['utz_tokens.settings'] = array(
    'label' => t('User Time Zone Tokens settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}
